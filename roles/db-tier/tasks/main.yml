---
# tasks file for db-tier

- name: Check /etc/system-fips
  ansible.builtin.stat:
    path: "/etc/system-fips"
  register: etc_system_fips

- name: Check /proc/sys/crypto/fips_enabled
  ansible.builtin.slurp:
    src: "/proc/sys/crypto/fips_enabled"
  register: fips_enabled

- ansible.builtin.set_fact:
    fips_mode: "{{ fips_enabled.content | b64decode }} | int "

- name: Call FIPS mode install
  ansible.builtin.include_tasks: fips_install.yml
  when:
    - etc_system_fips.stat.exists
    - fips_mode == 1

- name: Call standard mode install
  ansible.builtin.include_tasks: standard_install.yml
  when:
    - not etc_system_fips.stat.exists
    - fips_mode == 0

- name: Create a new database with name "{{ pg_db_name }}"
  community.postgresql.postgresql_db:
    name: "{{ pg_db_name }}"

- name: Connect to {{ pg_db_name }} database, create {{ pg_db_user }}, and grant access to database
  community.postgresql.postgresql_user:
    db: "{{ pg_db_name }}"
    name: "{{ pg_db_user }}"
    password: "{{ pg_db_passwd }}"

- name: GRANT ALL PRIVILEGES ON DATABASE {{ pg_db_name }} TO {{ pg_db_name }}
  community.postgresql.postgresql_privs:
    db: "{{ pg_db_name }}"
    privs: ALL
    type: database
    role: "{{ pg_db_user }}"

- ansible.builtin.debug:
    var: ansible_facts.services

- name: Open postgresql port with firewalld
  ansible.posix.firewalld:
    service: "{{ item }}"
    permanent: true
    immediate: true
    state: enabled
  with_items: "{{postgresql_firewall_open_services}}"
  when:
    - ansible_os_family == 'RedHat'
    - ansible_distribution_major_version|int >= 7
    - ansible_facts.services['firewalld.service'] is defined and ansible_facts.services['firewalld.service'].state == 'running'
    - ansible_facts.services['firewalld.service'] is defined and ansible_facts.services['firewalld.service'].status == 'enabled'
  tags: firewall
