---

- name: Facts from PostgreSQL server
  become: true
  hosts: AnsibleGroup_appdbs
  gather_facts: true

- name: Facts from load balancer servers
  become: true
  hosts: AnsibleGroup_frontends
  gather_facts: true

- name: Smoke test the 3 Tier application
  hosts: localhost
  connection: local
  gather_facts: false
  tasks:
    - name: Check frontend(s) is responding on port 80
      uri:
        url: "http://{{ hostvars[item]['ansible_nodename'] }}"
        return_content: yes
      register: webpage
      with_items:
        - "{{ groups['AnsibleGroup_frontends'] }}"

    - name: Fail if the page content does not have <Ansible has done its job>
      fail:
      when: '"Ansible has done its job - Welcome to Tomcat" not in item.content'
      with_items: "{{ webpage.results }}"

    - name: Check 3ta app frontend is working
      uri:
        url: "http://{{ hostvars[item]['ansible_nodename'] }}/3ta/connectordbbservlet?"
        return_content: yes
      register: threetierpage
      with_items:
        - "{{ groups['AnsibleGroup_frontends'] }}"

    - set_fact:
        smoke_test_table: "{{ threetierpage.results[0].content | replace('\n','') | regex_replace('.*Table \\\"', '') | regex_replace('\\\" has been created.*$', '') }}"

    - debug:
        var: smoke_test_table

    - name: Fail if the page content does not have "Please check the DB manually"
      fail:
      when: '"Please check the DB manually" not in item.content'
      with_items: "{{ threetierpage.results }}"

    - name: query database {{ pg_db_name }} for newly created table {{ smoke_test_table }}
      community.postgresql.postgresql_query:
        login_host: "{{ hostvars[item]['ansible_nodename'] }}"
        db: "{{ pg_db_name }}"
        login_user: "{{ pg_db_user }}"
        login_password: "{{ pg_db_passwd }}"
        query: "SELECT * FROM {{ smoke_test_table }}"
      with_items:
        - "{{ groups['AnsibleGroup_appdbs'] }}"
      register: db_table_query

    - debug:
        var: db_table_query
...
